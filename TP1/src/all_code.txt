package main;

import main.abstractfactory.AdminFactory;
import main.abstractfactory.Cliente;
import main.abstractfactory.UsuarioFactory;
import main.builder.Usuario;
import main.factory.Libro;
import main.factory.LogisticaLibroDigital;
import main.factory.LogisticaLibroFisico;
import main.singleton.Database;

public class Main
{
    public static void main(String[] args)
    {

        System.out.println("\n\n\n");

        LogisticaLibroDigital fabricaDigital = new LogisticaLibroDigital();
        LogisticaLibroFisico fabricaFisica = new LogisticaLibroFisico();


        Libro libro1 = fabricaDigital.crearLibro("Harry Potter", "JK Rowling", 300);


        System.out.println("------------- Database -------------");

        //Creación de la DataBase
        Database db = Database.INSTANCE;

        //Creación y agregación de libros
        //Libros digitales
        db.agregarLibro(libro1);
        db.agregarLibro(fabricaDigital.crearLibro("Percy Jackson", "Rick Riordan", 300));
        //Libros Físicos
        db.agregarLibro(fabricaFisica.crearLibro("El Aleph", "Jorge Luis Borges", 150));
        db.agregarLibro(fabricaFisica.crearLibro("El Señor de los Anillos", "J.R.R. Tolkien", 1200));
        db.agregarLibro(fabricaFisica.crearLibro("Dune", "Frank Herbert", 688));


        //Impresión de libros
        db.listarLibros();
        System.out.println("------------------------------------\n\n");


        System.out.println("------------- Cliente -------------");
        // Cliente administrador
        Cliente admin = new Cliente(new AdminFactory(), "Oscuro");
        admin.usarSistema(libro1);

        // Cliente usuario normal
        Cliente usuario = new Cliente(new UsuarioFactory(), "Claro");
        usuario.usarSistema(libro1);


        System.out.println("-----------------------------------\n\n");


        System.out.println("------------- Usuario -------------");
        //Impresión de Usuarios

        Usuario usuario1 = Usuario.builder()
                .nombre("Fran")
                .email("francisco123@gmail.com")
                .build();
        Usuario usuario2 = Usuario.builder()
                .nombre("Jennifer")
                .email("Jennifer123@gmail.com")
                .build();

        System.out.println(usuario1);
        System.out.println(usuario2);

        System.out.println("-----------------------------------\n\n");


    }
}
package main.abstractfactory;

public class AdminFactory implements BibliotecaFactory
{
    @Override
    public InterfazUI crearUI(String tema) {
        return new AdminUI(tema);
    }

    @Override
    public MetodoEnvio crearMetodoEnvio() {
        return new EnvioExpress();
    }
}
package main.abstractfactory;

import lombok.AllArgsConstructor;

@AllArgsConstructor

public class AdminUI implements InterfazUI
{
    private String tema;

    @Override
    public void mostrarUI()
    {
        System.out.println("Mostrando UI de Admin con el tema "+ tema);
    }
}
package main.abstractfactory;

public interface BibliotecaFactory
{
    InterfazUI crearUI(String tipo);
    MetodoEnvio crearMetodoEnvio();
}
package main.abstractfactory;

import main.factory.Libro;

public class Cliente
{
    private final InterfazUI interfaz;
    private final MetodoEnvio envio;

    public Cliente(BibliotecaFactory factory,String tema)
    {
        interfaz = factory.crearUI(tema);
        envio = factory.crearMetodoEnvio();
    }

    public void usarSistema(Libro libro)
    {
        interfaz.mostrarUI();
        envio.enviar(libro.mostrarInfo());
    }

}
package main.abstractfactory;

public class EnvioExpress implements MetodoEnvio
{
    @Override
    public void enviar( String item )
    {
        System.out.println("El envio del item " + item + " es express");
    }
}
package main.abstractfactory;

public class EnvioNormal implements MetodoEnvio
{
    @Override
    public void enviar( String item )
    {
        System.out.println("El envio del item " + item + " es normal");
    }
}
package main.abstractfactory;

public interface InterfazUI
{
    void mostrarUI();
}
package main.abstractfactory;

public interface MetodoEnvio
{
    void enviar(String item);
}
package main.abstractfactory;

// Implementa la fábrica para crear la familia de objetos de Usuario.
public class UsuarioFactory implements BibliotecaFactory
{
    @Override
    public InterfazUI crearUI(String tema) {
        return new UsuarioUI(tema);
    }

    @Override
    public MetodoEnvio crearMetodoEnvio() {
        return new EnvioNormal();
    }
}
package main.abstractfactory;

import lombok.AllArgsConstructor;

@AllArgsConstructor

public class UsuarioUI implements InterfazUI
{
    private String tema;
    @Override
    public void mostrarUI()
    {
        System.out.println("Mostrando UI de usuario con el tema " + tema);
    }
}
package main.builder;

import lombok.Builder;
import lombok.Getter;
import lombok.NonNull;
import lombok.ToString;

@Getter
@Builder
@ToString

// Cloneable para poder implementar deep clone en prestamo
public class Usuario implements Cloneable {
    @NonNull
    private String nombre, email;
    private String domicilio, fechaDeNacimiento;
    private int telefono;


    @Override
    public Usuario clone() throws CloneNotSupportedException {
        return (Usuario) super.clone();
    }
}
package main.factory;


public interface Libro
{

    String mostrarInfo();
    String getTitulo();
}
package main.factory;

import lombok.AllArgsConstructor;


@AllArgsConstructor

public class LibroDigital implements Libro
{
    private String titulo,autor;
    private int paginas;

    @Override
    public String mostrarInfo()
    {
        return ("Libro digital: \"" + titulo + "\" por " + autor );
    }

    @Override
    public String getTitulo()
    {
        return titulo;
    }

}
package main.factory;

import lombok.AllArgsConstructor;


@AllArgsConstructor

public class LibroFisico implements Libro
{

    private String titulo,autor;
    private int paginas;

    @Override
    public String mostrarInfo()
    {
        return ("Libro físico: \"" + titulo + "\" por " + autor );
    }

    @Override
    public String getTitulo()
    {
        return titulo;
    }

}
package main.factory;

public abstract class LogisticaLibro
{
    public abstract Libro crearLibro(String nombre, String autor, int numPaginas);

}
package main.factory;

public class LogisticaLibroDigital extends LogisticaLibro
{
    @Override
    public Libro crearLibro(String nombre, String autor, int numPaginas)
    {
        return new LibroDigital(nombre,autor,300);
    }
}
package main.factory;

public class LogisticaLibroFisico extends LogisticaLibro
{

    @Override
    public Libro crearLibro(String nombre,String autor, int numPaginas)
    {
        return new LibroFisico(nombre, autor, numPaginas);
    }
}
package main.prototype;

import lombok.AllArgsConstructor;
import lombok.Getter;
import lombok.Setter;
import main.builder.Usuario;
import main.factory.Libro;

@Getter @Setter
@AllArgsConstructor


public class Prestamo implements Cloneable {
    private Libro libro;
    private Usuario usuario;
    private String fechaInicio;
    private String fechaFin;




    // Shallowcopy
    @Override
    public Prestamo clone() throws CloneNotSupportedException
    {
        return (Prestamo) super.clone();
    }

    //DeepCopy
    public Prestamo deepClone() throws CloneNotSupportedException{
        // Start with a shallow copy to get primitives copied.
        Prestamo cloned = (Prestamo) super.clone();

        // Now, manually create copies of all mutable objects.
        cloned.usuario = this.usuario.clone();

        return cloned;
    }
}
package main.singleton;

import main.factory.Libro;

import java.util.ArrayList;
import java.util.List;



public enum Database
{
    INSTANCE;
    private final List<Libro> listaLibros = new ArrayList<>();



    public void agregarLibro(Libro libro)
    {
        listaLibros.add(libro);
    }


    public void listarLibros()
    {
        System.out.println("La lista de libros hasta el momento está conformada por: ");
        int i = 0;
        for (Libro libro : listaLibros)
        {
            System.out.println(i + ". "+ libro.mostrarInfo());
            i++;
        }
        System.out.println("Total de libros: " + listaLibros.size());
    }
}
